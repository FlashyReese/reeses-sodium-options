plugins {
    id 'org.ajoberstar.grgit' version '5.2.0'
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    id 'signing'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+mc${project.minecraft_version}-${getVersionMetadata()}"
group = project.maven_group

repositories {
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url "https://maven.flashyreese.me/releases"
    }
    maven {
        url "https://maven.flashyreese.me/snapshots"
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //modImplementation "me.jellysquid.mods:sodium-fabric:0.4.10+build.219"
    modImplementation "maven.modrinth:sodium:${project.sodium_version}"
    //modImplementation "maven.modrinth:iris:${project.iris_version}"

    //modRuntimeOnly "maven.modrinth:lazydfu:0.1.3"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from "LICENSE.txt"
}


// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        maven {
            name = "FlashyReeseReleases"
            url = "https://maven.flashyreese.me/releases"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        maven {
            name = "FlashyReeseSnapshots"
            url = "https://maven.flashyreese.me/snapshots"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

def getVersionMetadata() {
    def build_id = System.getenv("GITHUB_RUN_NUMBER")

    // CI builds only
    if (build_id != null) {
        return "build.${build_id}"
    }

    if (grgit != null) {
        def head = grgit.head()
        def id = head.abbreviatedId

        // Flag the build if the build tree is not clean
        if (!grgit.status().clean) {
            id += "-dirty"
        }

        return "rev.${id}"
    }

    // No tracking information could be found about the build
    return "unknown"
}